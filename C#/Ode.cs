/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OdeLibrary {

using System;
using System.Runtime.InteropServices;

public class Ode : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Ode(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Ode obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Ode() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Ode(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void system(state_type x, state_type dxdt, double t) {
    if (SwigDerivedClassHasMethod("system", swigMethodTypes0)) CorePINVOKE.Ode_systemSwigExplicitOde(swigCPtr, state_type.getCPtr(x), state_type.getCPtr(dxdt), t); else CorePINVOKE.Ode_system(swigCPtr, state_type.getCPtr(x), state_type.getCPtr(dxdt), t);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void observer(state_type x, double t) {
    if (SwigDerivedClassHasMethod("observer", swigMethodTypes1)) CorePINVOKE.Ode_observerSwigExplicitOde(swigCPtr, state_type.getCPtr(x), t); else CorePINVOKE.Ode_observer(swigCPtr, state_type.getCPtr(x), t);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public state_type initialConditions {
    set {
      CorePINVOKE.Ode_initialConditions_set(swigCPtr, state_type.getCPtr(value));
    } 
    get {
      IntPtr cPtr = CorePINVOKE.Ode_initialConditions_get(swigCPtr);
      state_type ret = (cPtr == IntPtr.Zero) ? null : new state_type(cPtr, false);
      return ret;
    } 
  }

  public double from {
    set {
      CorePINVOKE.Ode_from_set(swigCPtr, value);
    } 
    get {
      double ret = CorePINVOKE.Ode_from_get(swigCPtr);
      return ret;
    } 
  }

  public double to {
    set {
      CorePINVOKE.Ode_to_set(swigCPtr, value);
    } 
    get {
      double ret = CorePINVOKE.Ode_to_get(swigCPtr);
      return ret;
    } 
  }

  public double step {
    set {
      CorePINVOKE.Ode_step_set(swigCPtr, value);
    } 
    get {
      double ret = CorePINVOKE.Ode_step_get(swigCPtr);
      return ret;
    } 
  }

  public Ode() : this(CorePINVOKE.new_Ode(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("system", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateOde_0(SwigDirectorsystem);
    if (SwigDerivedClassHasMethod("observer", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateOde_1(SwigDirectorobserver);
    CorePINVOKE.Ode_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Ode));
    return hasDerivedMethod;
  }

  private void SwigDirectorsystem(IntPtr x, IntPtr dxdt, double t) {
    system(new state_type(x, false), new state_type(dxdt, false), t);
  }

  private void SwigDirectorobserver(IntPtr x, double t) {
    observer(new state_type(x, false), t);
  }

  public delegate void SwigDelegateOde_0(IntPtr x, IntPtr dxdt, double t);
  public delegate void SwigDelegateOde_1(IntPtr x, double t);

  private SwigDelegateOde_0 swigDelegate0;
  private SwigDelegateOde_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(state_type), typeof(state_type), typeof(double) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(state_type), typeof(double) };
}

}
