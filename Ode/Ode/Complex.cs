/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OdeLibrary {

using System;
using System.Runtime.InteropServices;

public partial class Complex : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Complex(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Complex obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Complex() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Complex(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Complex(double r, double i) : this(CorePINVOKE.new_Complex__SWIG_0(r, i), true) {
  }

  public Complex(Complex other) : this(CorePINVOKE.new_Complex__SWIG_1(Complex.getCPtr(other)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public double imag() {
    double ret = CorePINVOKE.Complex_imag(swigCPtr);
    return ret;
  }

  public double real() {
    double ret = CorePINVOKE.Complex_real(swigCPtr);
    return ret;
  }

  public Complex Multiply(double r) {
    Complex ret = new Complex(CorePINVOKE.Complex_Multiply__SWIG_0(swigCPtr, r), false);
    return ret;
  }

  public Complex Add(Complex rhs) {
    Complex ret = new Complex(CorePINVOKE.Complex_Add(swigCPtr, Complex.getCPtr(rhs)), false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Complex Substract(Complex rhs) {
    Complex ret = new Complex(CorePINVOKE.Complex_Substract(swigCPtr, Complex.getCPtr(rhs)), false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Complex Multiply(Complex rhs) {
    Complex ret = new Complex(CorePINVOKE.Complex_Multiply__SWIG_1(swigCPtr, Complex.getCPtr(rhs)), false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Complex Divide(Complex rhs) {
    Complex ret = new Complex(CorePINVOKE.Complex_Divide(swigCPtr, Complex.getCPtr(rhs)), false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
