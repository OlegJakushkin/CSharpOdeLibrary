/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#region

using System;
using System.Runtime.InteropServices;

#endregion

namespace OdeLibrary
{
    public class StateType : IDisposable
#if !SWIG_DOTNET_1
                             , System.Collections.Generic.IList<double>
#endif
    {
        private HandleRef _swigCPtr;
        protected bool SwigcMemOwn;

        internal StateType(IntPtr cPtr, bool cMemoryOwn)
        {
            SwigcMemOwn = cMemoryOwn;
            _swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef GetCPtr(StateType obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj._swigCPtr;
        }

        ~StateType()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (_swigCPtr.Handle != IntPtr.Zero)
                {
                    if (SwigcMemOwn)
                    {
                        SwigcMemOwn = false;
                        CorePinvoke.delete_StateType(_swigCPtr);
                    }
                    _swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public StateType(System.Collections.ICollection c) : this()
        {
            if (c == null)
                throw new ArgumentNullException("c");
            foreach (double element in c)
            {
                Add(element);
            }
        }

        public bool IsFixedSize
        {
            get { return false; }
        }

        public bool IsReadOnly
        {
            get { return false; }
        }

        public double this[int index]
        {
            get { return Getitem(index); }
            set { Setitem(index, value); }
        }

        public int Capacity
        {
            get { return (int) capacity(); }
            set
            {
                if (value < Size())
// ReSharper disable NotResolvedInText
                    throw new ArgumentOutOfRangeException("Capacity");
// ReSharper restore NotResolvedInText
                Reserve((uint) value);
            }
        }

        public int Count
        {
            get { return (int) Size(); }
        }

        public bool IsSynchronized
        {
            get { return false; }
        }

#if SWIG_DOTNET_1
  public void CopyTo(System.Array array)
#else
        public void CopyTo(double[] array)
#endif
        {
            CopyTo(0, array, 0, Count);
        }

#if SWIG_DOTNET_1
  public void CopyTo(System.Array array, int arrayIndex)
#else
        public void CopyTo(double[] array, int arrayIndex)
#endif
        {
            CopyTo(0, array, arrayIndex, Count);
        }

#if SWIG_DOTNET_1
  public void CopyTo(int index, System.Array array, int arrayIndex, int count)
#else
        public void CopyTo(int index, double[] array, int arrayIndex, int count)
#endif
        {
            if (array == null)
                throw new ArgumentNullException("array");
            if (index < 0)
                throw new ArgumentOutOfRangeException("index", "Value is less than zero");
            if (arrayIndex < 0)
                throw new ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
            if (count < 0)
                throw new ArgumentOutOfRangeException("count", "Value is less than zero");
            if (array.Rank > 1)
                throw new ArgumentException("Multi dimensional array.", "array");
            if (index + count > Count || arrayIndex + count > array.Length)
                throw new ArgumentException("Number of elements to copy is too large.");
            for (var i = 0; i < count; i++)
                array.SetValue(Getitemcopy(index + i), arrayIndex + i);
        }

#if !SWIG_DOTNET_1
        System.Collections.Generic.IEnumerator<double> System.Collections.Generic.IEnumerable<double>.GetEnumerator()
        {
            return new StateTypeEnumerator(this);
        }
#endif

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return new StateTypeEnumerator(this);
        }

        public StateTypeEnumerator GetEnumerator()
        {
            return new StateTypeEnumerator(this);
        }

        // Type-safe enumerator
        /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
        /// whenever the collection is modified. This has been done for changes in the size of the
        /// collection but not when one of the elements of the collection is modified as it is a bit
        /// tricky to detect unmanaged code that modifies the collection under our feet.
        public sealed class StateTypeEnumerator : 
#if !SWIG_DOTNET_1
                                                  System.Collections.Generic.IEnumerator<double>
#endif
        {
            private readonly StateType _collectionRef;
            private int _currentIndex;
            private object _currentObject;
            private readonly int _currentSize;

            public StateTypeEnumerator(StateType collection)
            {
                _collectionRef = collection;
                _currentIndex = -1;
                _currentObject = null;
                _currentSize = _collectionRef.Count;
            }

            // Type-safe iterator Current
            public double Current
            {
                get
                {
                    if (_currentIndex == -1)
                        throw new InvalidOperationException("Enumeration not started.");
                    if (_currentIndex > _currentSize - 1)
                        throw new InvalidOperationException("Enumeration finished.");
                    if (_currentObject == null)
                        throw new InvalidOperationException("Collection modified.");
                    return (double) _currentObject;
                }
            }

            // Type-unsafe IEnumerator.Current
            object System.Collections.IEnumerator.Current
            {
                get { return Current; }
            }

            public bool MoveNext()
            {
                var size = _collectionRef.Count;
                var moveOkay = (_currentIndex + 1 < size) && (size == _currentSize);
                if (moveOkay)
                {
                    _currentIndex++;
                    _currentObject = _collectionRef[_currentIndex];
                }
                else
                {
                    _currentObject = null;
                }
                return moveOkay;
            }

            public void Reset()
            {
                _currentIndex = -1;
                _currentObject = null;
                if (_collectionRef.Count != _currentSize)
                {
                    throw new InvalidOperationException("Collection modified.");
                }
            }

#if !SWIG_DOTNET_1
            public void Dispose()
            {
                _currentIndex = -1;
                _currentObject = null;
            }
#endif
        }

        public void Clear()
        {
            CorePinvoke.StateType_Clear(_swigCPtr);
        }

        public void Add(double x)
        {
            CorePinvoke.StateType_Add(_swigCPtr, x);
        }

        private uint Size()
        {
            var ret = CorePinvoke.StateType_size(_swigCPtr);
            return ret;
        }

// ReSharper disable InconsistentNaming
        private uint capacity()
// ReSharper restore InconsistentNaming
        {
            var ret = CorePinvoke.StateType_capacity(_swigCPtr);
            return ret;
        }

        private void Reserve(uint n)
        {
            CorePinvoke.StateType_reserve(_swigCPtr, n);
        }

        public StateType() : this(CorePinvoke.new_StateType__SWIG_0(), true)
        {
        }

        public StateType(StateType other) : this(CorePinvoke.new_StateType__SWIG_1(GetCPtr(other)), true)
        {
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public StateType(int capacity) : this(CorePinvoke.new_StateType__SWIG_2(capacity), true)
        {
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        private double Getitemcopy(int index)
        {
            var ret = CorePinvoke.StateType_getitemcopy(_swigCPtr, index);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
            return ret;
        }

        private double Getitem(int index)
        {
            var ret = CorePinvoke.StateType_getitem(_swigCPtr, index);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
            return ret;
        }

        private void Setitem(int index, double val)
        {
            CorePinvoke.StateType_setitem(_swigCPtr, index, val);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public void AddRange(StateType values)
        {
            CorePinvoke.StateType_AddRange(_swigCPtr, GetCPtr(values));
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public StateType GetRange(int index, int count)
        {
            var cPtr = CorePinvoke.StateType_GetRange(_swigCPtr, index, count);
            var ret = (cPtr == IntPtr.Zero) ? null : new StateType(cPtr, true);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
            return ret;
        }

        public void Insert(int index, double x)
        {
            CorePinvoke.StateType_Insert(_swigCPtr, index, x);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public void InsertRange(int index, StateType values)
        {
            CorePinvoke.StateType_InsertRange(_swigCPtr, index, GetCPtr(values));
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public void RemoveAt(int index)
        {
            CorePinvoke.StateType_RemoveAt(_swigCPtr, index);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public void RemoveRange(int index, int count)
        {
            CorePinvoke.StateType_RemoveRange(_swigCPtr, index, count);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public static StateType Repeat(double value, int count)
        {
            var cPtr = CorePinvoke.StateType_Repeat(value, count);
            var ret = (cPtr == IntPtr.Zero) ? null : new StateType(cPtr, true);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
            return ret;
        }

        public void Reverse()
        {
            CorePinvoke.StateType_Reverse__SWIG_0(_swigCPtr);
        }

        public void Reverse(int index, int count)
        {
            CorePinvoke.StateType_Reverse__SWIG_1(_swigCPtr, index, count);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public void SetRange(int index, StateType values)
        {
            CorePinvoke.StateType_SetRange(_swigCPtr, index, GetCPtr(values));
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        public bool Contains(double value)
        {
            var ret = CorePinvoke.StateType_Contains(_swigCPtr, value);
            return ret;
        }

        public int IndexOf(double value)
        {
            var ret = CorePinvoke.StateType_IndexOf(_swigCPtr, value);
            return ret;
        }

        public int LastIndexOf(double value)
        {
            var ret = CorePinvoke.StateType_LastIndexOf(_swigCPtr, value);
            return ret;
        }

        public bool Remove(double value)
        {
            var ret = CorePinvoke.StateType_Remove(_swigCPtr, value);
            return ret;
        }
    }
}