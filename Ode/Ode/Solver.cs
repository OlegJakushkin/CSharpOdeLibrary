/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#region

using System;
using System.Runtime.InteropServices;

#endregion

namespace OdeLibrary
{
    public class Solver : IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Solver(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(Solver obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
        }

        ~Solver()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        CorePINVOKE.delete_Solver(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public StepperTypeCode StepperCode
        {
            set { CorePINVOKE.Solver_StepperCode_set(swigCPtr, (int) value); }
            get
            {
                var ret = (StepperTypeCode) CorePINVOKE.Solver_StepperCode_get(swigCPtr);
                return ret;
            }
        }

        public int ConvenienceSolve(Ode od, double from, double step, double to)
        {
            var ret = CorePINVOKE.Solver_ConvenienceSolve(swigCPtr, Ode.getCPtr(od), from, step, to);
            return ret;
        }

        public int Solve(Ode ode, double from, double step, double to,
                         IntegrateFunctionTypeCode integrateFunctionTypeCode)
        {
            var ret = CorePINVOKE.Solver_Solve__SWIG_0(swigCPtr, Ode.getCPtr(ode), from, step, to,
                                                       (int) integrateFunctionTypeCode);
            return ret;
        }

        public int Solve(Ode ode, double from, double step, double to)
        {
            var ret = CorePINVOKE.Solver_Solve__SWIG_1(swigCPtr, Ode.getCPtr(ode), from, step, to);
            return ret;
        }

        public int Solve(Ode ode, double from, double step, int stepsCount)
        {
            var ret = CorePINVOKE.Solver_Solve__SWIG_2(swigCPtr, Ode.getCPtr(ode), from, step, stepsCount);
            return ret;
        }

        public int Solve(Ode ode, StateType timePoints, double step)
        {
            var ret = CorePINVOKE.Solver_Solve__SWIG_3(swigCPtr, Ode.getCPtr(ode), StateType.getCPtr(timePoints), step);
            if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public Solver() : this(CorePINVOKE.new_Solver(), true)
        {
        }
    }
}
