/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#region

using System;
using System.IO;
using System.Runtime.InteropServices;

#endregion

namespace OdeLibrary
{
    internal class CorePINVOKE
    {
        protected class SWIGExceptionHelper
        {
            public delegate void ExceptionDelegate(string message);

            public delegate void ExceptionArgumentDelegate(string message, string paramName);

            private static readonly ExceptionDelegate applicationDelegate = SetPendingApplicationException;
            private static readonly ExceptionDelegate arithmeticDelegate = SetPendingArithmeticException;
            private static readonly ExceptionDelegate divideByZeroDelegate = SetPendingDivideByZeroException;
            private static readonly ExceptionDelegate indexOutOfRangeDelegate = SetPendingIndexOutOfRangeException;
            private static readonly ExceptionDelegate invalidCastDelegate = SetPendingInvalidCastException;
            private static readonly ExceptionDelegate invalidOperationDelegate = SetPendingInvalidOperationException;
            private static readonly ExceptionDelegate ioDelegate = SetPendingIOException;
            private static readonly ExceptionDelegate nullReferenceDelegate = SetPendingNullReferenceException;
            private static readonly ExceptionDelegate outOfMemoryDelegate = SetPendingOutOfMemoryException;
            private static readonly ExceptionDelegate overflowDelegate = SetPendingOverflowException;
            private static readonly ExceptionDelegate systemDelegate = SetPendingSystemException;

            private static readonly ExceptionArgumentDelegate argumentDelegate = SetPendingArgumentException;
            private static readonly ExceptionArgumentDelegate argumentNullDelegate = SetPendingArgumentNullException;

            private static readonly ExceptionArgumentDelegate argumentOutOfRangeDelegate =
                SetPendingArgumentOutOfRangeException;

            [DllImport("Core", EntryPoint = "SWIGRegisterExceptionCallbacks_Core")]
            public static extern void SWIGRegisterExceptionCallbacks_Core(
                ExceptionDelegate applicationDelegate,
                ExceptionDelegate arithmeticDelegate,
                ExceptionDelegate divideByZeroDelegate,
                ExceptionDelegate indexOutOfRangeDelegate,
                ExceptionDelegate invalidCastDelegate,
                ExceptionDelegate invalidOperationDelegate,
                ExceptionDelegate ioDelegate,
                ExceptionDelegate nullReferenceDelegate,
                ExceptionDelegate outOfMemoryDelegate,
                ExceptionDelegate overflowDelegate,
                ExceptionDelegate systemExceptionDelegate);

            [DllImport("Core", EntryPoint = "SWIGRegisterExceptionArgumentCallbacks_Core")]
            public static extern void SWIGRegisterExceptionCallbacksArgument_Core(
                ExceptionArgumentDelegate argumentDelegate,
                ExceptionArgumentDelegate argumentNullDelegate,
                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

            private static void SetPendingApplicationException(string message)
            {
                SWIGPendingException.Set(new ApplicationException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingArithmeticException(string message)
            {
                SWIGPendingException.Set(new ArithmeticException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingDivideByZeroException(string message)
            {
                SWIGPendingException.Set(new DivideByZeroException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingIndexOutOfRangeException(string message)
            {
                SWIGPendingException.Set(new IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingInvalidCastException(string message)
            {
                SWIGPendingException.Set(new InvalidCastException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingInvalidOperationException(string message)
            {
                SWIGPendingException.Set(new InvalidOperationException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingIOException(string message)
            {
                SWIGPendingException.Set(new IOException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingNullReferenceException(string message)
            {
                SWIGPendingException.Set(new NullReferenceException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingOutOfMemoryException(string message)
            {
                SWIGPendingException.Set(new OutOfMemoryException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingOverflowException(string message)
            {
                SWIGPendingException.Set(new OverflowException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingSystemException(string message)
            {
                SWIGPendingException.Set(new SystemException(message, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingArgumentException(string message, string paramName)
            {
                SWIGPendingException.Set(new ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
            }

            private static void SetPendingArgumentNullException(string message, string paramName)
            {
                var e = SWIGPendingException.Retrieve();
                if (e != null) message = message + " Inner Exception: " + e.Message;
                SWIGPendingException.Set(new ArgumentNullException(paramName, message));
            }

            private static void SetPendingArgumentOutOfRangeException(string message, string paramName)
            {
                var e = SWIGPendingException.Retrieve();
                if (e != null) message = message + " Inner Exception: " + e.Message;
                SWIGPendingException.Set(new ArgumentOutOfRangeException(paramName, message));
            }

            static SWIGExceptionHelper()
            {
                SWIGRegisterExceptionCallbacks_Core(
                    applicationDelegate,
                    arithmeticDelegate,
                    divideByZeroDelegate,
                    indexOutOfRangeDelegate,
                    invalidCastDelegate,
                    invalidOperationDelegate,
                    ioDelegate,
                    nullReferenceDelegate,
                    outOfMemoryDelegate,
                    overflowDelegate,
                    systemDelegate);

                SWIGRegisterExceptionCallbacksArgument_Core(
                    argumentDelegate,
                    argumentNullDelegate,
                    argumentOutOfRangeDelegate);
            }
        }

        protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

        public class SWIGPendingException
        {
            [ThreadStatic] private static Exception pendingException;
            private static int numExceptionsPending;

            public static bool Pending
            {
                get
                {
                    var pending = false;
                    if (numExceptionsPending > 0)
                        if (pendingException != null)
                            pending = true;
                    return pending;
                }
            }

            public static void Set(Exception e)
            {
                if (pendingException != null)
                    throw new ApplicationException(
                        "FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" +
                        pendingException + ")", e);
                pendingException = e;
                lock (typeof (CorePINVOKE))
                {
                    numExceptionsPending++;
                }
            }

            public static Exception Retrieve()
            {
                Exception e = null;
                if (numExceptionsPending > 0)
                {
                    if (pendingException != null)
                    {
                        e = pendingException;
                        pendingException = null;
                        lock (typeof (CorePINVOKE))
                        {
                            numExceptionsPending--;
                        }
                    }
                }
                return e;
            }
        }


        protected class SWIGStringHelper
        {
            public delegate string SWIGStringDelegate(string message);

            private static readonly SWIGStringDelegate stringDelegate = CreateString;

            [DllImport("Core", EntryPoint = "SWIGRegisterStringCallback_Core")]
            public static extern void SWIGRegisterStringCallback_Core(SWIGStringDelegate stringDelegate);

            private static string CreateString(string cString)
            {
                return cString;
            }

            static SWIGStringHelper()
            {
                SWIGRegisterStringCallback_Core(stringDelegate);
            }
        }

        protected static SWIGStringHelper swigStringHelper = new SWIGStringHelper();


        static CorePINVOKE()
        {
        }


        [DllImport("Core", EntryPoint = "CSharp_StateType_Clear")]
        public static extern void StateType_Clear(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Add")]
        public static extern void StateType_Add(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_size")]
        public static extern uint StateType_size(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_StateType_capacity")]
        public static extern uint StateType_capacity(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_StateType_reserve")]
        public static extern void StateType_reserve(HandleRef jarg1, uint jarg2);

        [DllImport("Core", EntryPoint = "CSharp_new_StateType__SWIG_0")]
        public static extern IntPtr new_StateType__SWIG_0();

        [DllImport("Core", EntryPoint = "CSharp_new_StateType__SWIG_1")]
        public static extern IntPtr new_StateType__SWIG_1(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_new_StateType__SWIG_2")]
        public static extern IntPtr new_StateType__SWIG_2(int jarg1);

        [DllImport("Core", EntryPoint = "CSharp_StateType_getitemcopy")]
        public static extern double StateType_getitemcopy(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_getitem")]
        public static extern double StateType_getitem(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_setitem")]
        public static extern void StateType_setitem(HandleRef jarg1, int jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_AddRange")]
        public static extern void StateType_AddRange(HandleRef jarg1, HandleRef jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_GetRange")]
        public static extern IntPtr StateType_GetRange(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Insert")]
        public static extern void StateType_Insert(HandleRef jarg1, int jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_InsertRange")]
        public static extern void StateType_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_RemoveAt")]
        public static extern void StateType_RemoveAt(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_RemoveRange")]
        public static extern void StateType_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Repeat")]
        public static extern IntPtr StateType_Repeat(double jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Reverse__SWIG_0")]
        public static extern void StateType_Reverse__SWIG_0(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Reverse__SWIG_1")]
        public static extern void StateType_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_SetRange")]
        public static extern void StateType_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Contains")]
        public static extern bool StateType_Contains(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_IndexOf")]
        public static extern int StateType_IndexOf(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_LastIndexOf")]
        public static extern int StateType_LastIndexOf(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_StateType_Remove")]
        public static extern bool StateType_Remove(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_delete_StateType")]
        public static extern void delete_StateType(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Ode_system")]
        public static extern void Ode_system(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, double jarg4);

        [DllImport("Core", EntryPoint = "CSharp_Ode_systemSwigExplicitOde")]
        public static extern void Ode_systemSwigExplicitOde(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3,
                                                            double jarg4);

        [DllImport("Core", EntryPoint = "CSharp_Ode_observer")]
        public static extern void Ode_observer(HandleRef jarg1, HandleRef jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_Ode_observerSwigExplicitOde")]
        public static extern void Ode_observerSwigExplicitOde(HandleRef jarg1, HandleRef jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_Ode_InitialConditions_set")]
        public static extern void Ode_InitialConditions_set(HandleRef jarg1, HandleRef jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Ode_InitialConditions_get")]
        public static extern IntPtr Ode_InitialConditions_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_delete_Ode")]
        public static extern void delete_Ode(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_new_Ode")]
        public static extern IntPtr new_Ode();

        [DllImport("Core", EntryPoint = "CSharp_Ode_director_connect")]
        public static extern void Ode_director_connect(HandleRef jarg1, Ode.SwigDelegateOde_0 delegate0,
                                                       Ode.SwigDelegateOde_1 delegate1);

        [DllImport("Core", EntryPoint = "CSharp_Solver_StepperCode_set")]
        public static extern void Solver_StepperCode_set(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Solver_StepperCode_get")]
        public static extern int Solver_StepperCode_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Solver_ConvenienceSolve")]
        public static extern int Solver_ConvenienceSolve(HandleRef jarg1, HandleRef jarg2, double jarg3, double jarg4,
                                                         double jarg5);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_0")]
        public static extern int Solver_Solve__SWIG_0(HandleRef jarg1, HandleRef jarg2, double jarg3, double jarg4,
                                                      double jarg5, int jarg6);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_1")]
        public static extern int Solver_Solve__SWIG_1(HandleRef jarg1, HandleRef jarg2, double jarg3, double jarg4,
                                                      double jarg5);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_2")]
        public static extern int Solver_Solve__SWIG_2(HandleRef jarg1, HandleRef jarg2, double jarg3, double jarg4,
                                                      int jarg5);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_3")]
        public static extern int Solver_Solve__SWIG_3(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, double jarg4);

        [DllImport("Core", EntryPoint = "CSharp_new_Solver")]
        public static extern IntPtr new_Solver();

        [DllImport("Core", EntryPoint = "CSharp_delete_Solver")]
        public static extern void delete_Solver(HandleRef jarg1);
    }
}
