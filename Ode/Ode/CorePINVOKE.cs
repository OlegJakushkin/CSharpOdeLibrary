/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

using System;
using System.Runtime.InteropServices;

namespace OdeLibrary
{
    internal class CorePinvoke
    {
        protected class SwigExceptionHelper
        {
            public delegate void ExceptionDelegate(string message);

            public delegate void ExceptionArgumentDelegate(string message, string paramName);

            private static readonly ExceptionDelegate ApplicationDelegate = SetPendingApplicationException;
            private static readonly ExceptionDelegate ArithmeticDelegate = SetPendingArithmeticException;
            private static readonly ExceptionDelegate DivideByZeroDelegate = SetPendingDivideByZeroException;
            private static readonly ExceptionDelegate IndexOutOfRangeDelegate = SetPendingIndexOutOfRangeException;
            private static readonly ExceptionDelegate InvalidCastDelegate = SetPendingInvalidCastException;
            private static readonly ExceptionDelegate InvalidOperationDelegate = SetPendingInvalidOperationException;
            private static readonly ExceptionDelegate IoDelegate = SetPendingIoException;
            private static readonly ExceptionDelegate NullReferenceDelegate = SetPendingNullReferenceException;
            private static readonly ExceptionDelegate OutOfMemoryDelegate = SetPendingOutOfMemoryException;
            private static readonly ExceptionDelegate OverflowDelegate = SetPendingOverflowException;
            private static readonly ExceptionDelegate SystemDelegate = SetPendingSystemException;

            private static readonly ExceptionArgumentDelegate ArgumentDelegate = SetPendingArgumentException;
            private static readonly ExceptionArgumentDelegate ArgumentNullDelegate = SetPendingArgumentNullException;

            private static readonly ExceptionArgumentDelegate ArgumentOutOfRangeDelegate =
                SetPendingArgumentOutOfRangeException;

            [DllImport("Core", EntryPoint = "SWIGRegisterExceptionCallbacks_Core")]
            public static extern void SWIGRegisterExceptionCallbacks_Core(
                ExceptionDelegate applicationDelegate,
                ExceptionDelegate arithmeticDelegate,
                ExceptionDelegate divideByZeroDelegate,
                ExceptionDelegate indexOutOfRangeDelegate,
                ExceptionDelegate invalidCastDelegate,
                ExceptionDelegate invalidOperationDelegate,
                ExceptionDelegate ioDelegate,
                ExceptionDelegate nullReferenceDelegate,
                ExceptionDelegate outOfMemoryDelegate,
                ExceptionDelegate overflowDelegate,
                ExceptionDelegate systemExceptionDelegate);

            [DllImport("Core", EntryPoint = "SWIGRegisterExceptionArgumentCallbacks_Core")]
            public static extern void SWIGRegisterExceptionCallbacksArgument_Core(
                ExceptionArgumentDelegate argumentDelegate,
                ExceptionArgumentDelegate argumentNullDelegate,
                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

            private static void SetPendingApplicationException(string message)
            {
                SwigPendingException.Set(new ApplicationException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingArithmeticException(string message)
            {
                SwigPendingException.Set(new ArithmeticException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingDivideByZeroException(string message)
            {
                SwigPendingException.Set(new DivideByZeroException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingIndexOutOfRangeException(string message)
            {
                SwigPendingException.Set(new IndexOutOfRangeException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingInvalidCastException(string message)
            {
                SwigPendingException.Set(new InvalidCastException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingInvalidOperationException(string message)
            {
                SwigPendingException.Set(new InvalidOperationException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingIoException(string message)
            {
                SwigPendingException.Set(new System.IO.IOException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingNullReferenceException(string message)
            {
                SwigPendingException.Set(new NullReferenceException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingOutOfMemoryException(string message)
            {
                SwigPendingException.Set(new OutOfMemoryException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingOverflowException(string message)
            {
                SwigPendingException.Set(new OverflowException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingSystemException(string message)
            {
                SwigPendingException.Set(new SystemException(message, SwigPendingException.Retrieve()));
            }

            private static void SetPendingArgumentException(string message, string paramName)
            {
                SwigPendingException.Set(new ArgumentException(message, paramName,
                                                                      SwigPendingException.Retrieve()));
            }

            private static void SetPendingArgumentNullException(string message, string paramName)
            {
                var e = SwigPendingException.Retrieve();
                if (e != null) message = message + " Inner Exception: " + e.Message;
                SwigPendingException.Set(new ArgumentNullException(paramName, message));
            }

            private static void SetPendingArgumentOutOfRangeException(string message, string paramName)
            {
                var e = SwigPendingException.Retrieve();
                if (e != null) message = message + " Inner Exception: " + e.Message;
                SwigPendingException.Set(new ArgumentOutOfRangeException(paramName, message));
            }

            static SwigExceptionHelper()
            {
                SWIGRegisterExceptionCallbacks_Core(
                    ApplicationDelegate,
                    ArithmeticDelegate,
                    DivideByZeroDelegate,
                    IndexOutOfRangeDelegate,
                    InvalidCastDelegate,
                    InvalidOperationDelegate,
                    IoDelegate,
                    NullReferenceDelegate,
                    OutOfMemoryDelegate,
                    OverflowDelegate,
                    SystemDelegate);

                SWIGRegisterExceptionCallbacksArgument_Core(
                    ArgumentDelegate,
                    ArgumentNullDelegate,
                    ArgumentOutOfRangeDelegate);
            }
        }

        // ReSharper disable InconsistentNaming
        protected static SwigExceptionHelper swigExceptionHelper = new SwigExceptionHelper();
        // ReSharper restore InconsistentNaming

        public class SwigPendingException
        {
            [ThreadStatic]
            private static Exception _pendingException;
            private static int _numExceptionsPending;

            public static bool Pending
            {
                get
                {
                    var pending = false;
                    if (_numExceptionsPending > 0)
                        if (_pendingException != null)
                            pending = true;
                    return pending;
                }
            }

            public static void Set(Exception e)
            {
                if (_pendingException != null)
                    throw new ApplicationException(
                        "FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" +
                        _pendingException + ")", e);
                _pendingException = e;
                lock (typeof(CorePinvoke)) {
                    _numExceptionsPending++;
                }
            }

            public static Exception Retrieve()
            {
                Exception e = null;
                if (_numExceptionsPending > 0) {
                    if (_pendingException != null) {
                        e = _pendingException;
                        _pendingException = null;
                        lock (typeof(CorePinvoke)) {
                            _numExceptionsPending--;
                        }
                    }
                }
                return e;
            }
        }


        protected class SwigStringHelper
        {
            public delegate string SwigStringDelegate(string message);

            private static readonly SwigStringDelegate StringDelegate = CreateString;

            [DllImport("Core", EntryPoint = "SWIGRegisterStringCallback_Core")]
            public static extern void SWIGRegisterStringCallback_Core(SwigStringDelegate stringDelegate);

            private static string CreateString(string cString)
            {
                return cString;
            }

            static SwigStringHelper()
            {
                SWIGRegisterStringCallback_Core(StringDelegate);
            }
        }

        // ReSharper disable InconsistentNaming
        protected static SwigStringHelper swigStringHelper = new SwigStringHelper();
        // ReSharper restore InconsistentNaming


        static CorePinvoke()
        {
        }


        [DllImport("Core", EntryPoint = "CSharp_state_type_Clear")]
        public static extern void state_type_Clear(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Add")]
        public static extern void state_type_Add(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_size")]
        public static extern uint state_type_size(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_state_type_capacity")]
        public static extern uint state_type_capacity(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_state_type_reserve")]
        public static extern void state_type_reserve(HandleRef jarg1, uint jarg2);

        [DllImport("Core", EntryPoint = "CSharp_new_state_type__SWIG_0")]
        public static extern IntPtr new_state_type__SWIG_0();

        [DllImport("Core", EntryPoint = "CSharp_new_state_type__SWIG_1")]
        public static extern IntPtr new_state_type__SWIG_1(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_new_state_type__SWIG_2")]
        public static extern IntPtr new_state_type__SWIG_2(int jarg1);

        [DllImport("Core", EntryPoint = "CSharp_state_type_getitemcopy")]
        public static extern double state_type_getitemcopy(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_getitem")]
        public static extern double state_type_getitem(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_setitem")]
        public static extern void state_type_setitem(HandleRef jarg1, int jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_AddRange")]
        public static extern void state_type_AddRange(HandleRef jarg1, HandleRef jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_GetRange")]
        public static extern IntPtr state_type_GetRange(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Insert")]
        public static extern void state_type_Insert(HandleRef jarg1, int jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_InsertRange")]
        public static extern void state_type_InsertRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_RemoveAt")]
        public static extern void state_type_RemoveAt(HandleRef jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_RemoveRange")]
        public static extern void state_type_RemoveRange(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Repeat")]
        public static extern IntPtr state_type_Repeat(double jarg1, int jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Reverse__SWIG_0")]
        public static extern void state_type_Reverse__SWIG_0(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Reverse__SWIG_1")]
        public static extern void state_type_Reverse__SWIG_1(HandleRef jarg1, int jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_SetRange")]
        public static extern void state_type_SetRange(HandleRef jarg1, int jarg2, HandleRef jarg3);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Contains")]
        public static extern bool state_type_Contains(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_IndexOf")]
        public static extern int state_type_IndexOf(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_LastIndexOf")]
        public static extern int state_type_LastIndexOf(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_state_type_Remove")]
        public static extern bool state_type_Remove(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_delete_state_type")]
        public static extern void delete_state_type(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Ode_system")]
        public static extern void Ode_system(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, double jarg4);

        [DllImport("Core", EntryPoint = "CSharp_Ode_systemSwigExplicitOde")]
        public static extern void Ode_systemSwigExplicitOde(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3,
                                                            double jarg4);

        [DllImport("Core", EntryPoint = "CSharp_Ode_observer")]
        public static extern void Ode_observer(HandleRef jarg1, HandleRef jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_Ode_observerSwigExplicitOde")]
        public static extern void Ode_observerSwigExplicitOde(HandleRef jarg1, HandleRef jarg2, double jarg3);

        [DllImport("Core", EntryPoint = "CSharp_Ode_initialConditions_set")]
        public static extern void Ode_initialConditions_set(HandleRef jarg1, HandleRef jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Ode_initialConditions_get")]
        public static extern IntPtr Ode_initialConditions_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Ode_from_set")]
        public static extern void Ode_from_set(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Ode_from_get")]
        public static extern double Ode_from_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Ode_to_set")]
        public static extern void Ode_to_set(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Ode_to_get")]
        public static extern double Ode_to_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_Ode_step_set")]
        public static extern void Ode_step_set(HandleRef jarg1, double jarg2);

        [DllImport("Core", EntryPoint = "CSharp_Ode_step_get")]
        public static extern double Ode_step_get(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_delete_Ode")]
        public static extern void delete_Ode(HandleRef jarg1);

        [DllImport("Core", EntryPoint = "CSharp_new_Ode")]
        public static extern IntPtr new_Ode();

        [DllImport("Core", EntryPoint = "CSharp_Ode_director_connect")]
        public static extern void Ode_director_connect(HandleRef jarg1, Ode.SwigDelegateOde0 delegate0,
                                                       Ode.SwigDelegateOde1 delegate1);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_0")]
        public static extern int Solver_Solve__SWIG_0(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_1")]
        public static extern int Solver_Solve__SWIG_1(HandleRef jarg1, HandleRef jarg2, int jarg3);

        [DllImport("Core", EntryPoint = "CSharp_Solver_Solve__SWIG_2")]
        public static extern int Solver_Solve__SWIG_2(HandleRef jarg1, HandleRef jarg2);

        [DllImport("Core", EntryPoint = "CSharp_new_Solver")]
        public static extern IntPtr new_Solver();

        [DllImport("Core", EntryPoint = "CSharp_delete_Solver")]
        public static extern void delete_Solver(HandleRef jarg1);
    }
}
