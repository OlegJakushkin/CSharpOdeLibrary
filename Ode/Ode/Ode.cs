/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#region

using System;
using System.Runtime.InteropServices;

#endregion

namespace OdeLibrary
{
    public class Ode : IDisposable
    {
        public delegate void SwigDelegateOde0(IntPtr x, IntPtr dxdt, double t);

        public delegate void SwigDelegateOde1(IntPtr x, double t);

        private static readonly Type[] SWIGMethodTypes0 = new[]
            {typeof (StateType), typeof (StateType), typeof (double)};

        private static readonly Type[] SWIGMethodTypes1 = new[] {typeof (StateType), typeof (double)};

        protected bool SwigcMemOwn;
        private HandleRef _swigCPtr;
        private SwigDelegateOde0 _swigDelegate0;
        private SwigDelegateOde1 _swigDelegate1;

        internal Ode(IntPtr cPtr, bool cMemoryOwn)
        {
            SwigcMemOwn = cMemoryOwn;
            _swigCPtr = new HandleRef(this, cPtr);
        }

        public Ode() : this(CorePinvoke.new_Ode(), true)
        {
            SwigDirectorConnect();
        }

        public StateType InitialConditions
        {
            set { CorePinvoke.Ode_InitialConditions_set(_swigCPtr, StateType.GetCPtr(value)); }
            get
            {
                var cPtr = CorePinvoke.Ode_InitialConditions_get(_swigCPtr);
                var ret = (cPtr == IntPtr.Zero) ? null : new StateType(cPtr, false);
                return ret;
            }
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (_swigCPtr.Handle != IntPtr.Zero)
                {
                    if (SwigcMemOwn)
                    {
                        SwigcMemOwn = false;
                        CorePinvoke.delete_Ode(_swigCPtr);
                    }
                    _swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        internal static HandleRef GetCPtr(Ode obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj._swigCPtr;
        }

        ~Ode()
        {
            Dispose();
        }

// ReSharper disable InconsistentNaming
        protected virtual void system(StateType x, StateType dxdt, double t)
// ReSharper restore InconsistentNaming
        {
            if (SwigDerivedClassHasMethod("system", SWIGMethodTypes0))
                CorePinvoke.Ode_systemSwigExplicitOde(_swigCPtr, StateType.GetCPtr(x), StateType.GetCPtr(dxdt), t);
            else CorePinvoke.Ode_system(_swigCPtr, StateType.GetCPtr(x), StateType.GetCPtr(dxdt), t);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

// ReSharper disable InconsistentNaming
        protected virtual void observer(StateType x, double t)
// ReSharper restore InconsistentNaming
        {
            if (SwigDerivedClassHasMethod("observer", SWIGMethodTypes1))
                CorePinvoke.Ode_observerSwigExplicitOde(_swigCPtr, StateType.GetCPtr(x), t);
            else CorePinvoke.Ode_observer(_swigCPtr, StateType.GetCPtr(x), t);
            if (CorePinvoke.SWIGPendingException.Pending) throw CorePinvoke.SWIGPendingException.Retrieve();
        }

        private void SwigDirectorConnect()
        {
            if (SwigDerivedClassHasMethod("system", SWIGMethodTypes0))
                _swigDelegate0 = SwigDirectorsystem;
            if (SwigDerivedClassHasMethod("observer", SWIGMethodTypes1))
                _swigDelegate1 = SwigDirectorobserver;
            CorePinvoke.Ode_director_connect(_swigCPtr, _swigDelegate0, _swigDelegate1);
        }

        private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes)
        {
            var methodInfo = GetType()
                                 .GetMethod(methodName,
                                            System.Reflection.BindingFlags.Public |
                                            System.Reflection.BindingFlags.NonPublic |
                                            System.Reflection.BindingFlags.Instance, null, methodTypes, null);
            var hasDerivedMethod = methodInfo.DeclaringType != null && methodInfo.DeclaringType.IsSubclassOf(typeof (Ode));
            return hasDerivedMethod;
        }

        private void SwigDirectorsystem(IntPtr x, IntPtr dxdt, double t)
        {
            system(new StateType(x, false), new StateType(dxdt, false), t);
        }

        private void SwigDirectorobserver(IntPtr x, double t)
        {
            observer(new StateType(x, false), t);
        }
    }
}