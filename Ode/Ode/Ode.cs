/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#region

using System;
using System.Reflection;
using System.Runtime.InteropServices;

#endregion

namespace OdeLibrary
{
    public class Ode : IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Ode(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(Ode obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
        }

        ~Ode()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        CorePINVOKE.delete_Ode(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        protected virtual void system(StateType x, StateType dxdt, double t)
        {
            if (SwigDerivedClassHasMethod("system", swigMethodTypes0))
                CorePINVOKE.Ode_systemSwigExplicitOde(swigCPtr, StateType.getCPtr(x), StateType.getCPtr(dxdt), t);
            else CorePINVOKE.Ode_system(swigCPtr, StateType.getCPtr(x), StateType.getCPtr(dxdt), t);
            if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
        }

        protected virtual void observer(StateType x, double t)
        {
            if (SwigDerivedClassHasMethod("observer", swigMethodTypes1))
                CorePINVOKE.Ode_observerSwigExplicitOde(swigCPtr, StateType.getCPtr(x), t);
            else CorePINVOKE.Ode_observer(swigCPtr, StateType.getCPtr(x), t);
            if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
        }

        public StateType InitialConditions
        {
            set { CorePINVOKE.Ode_InitialConditions_set(swigCPtr, StateType.getCPtr(value)); }
            get
            {
                var cPtr = CorePINVOKE.Ode_InitialConditions_get(swigCPtr);
                var ret = (cPtr == IntPtr.Zero) ? null : new StateType(cPtr, false);
                return ret;
            }
        }

        public Ode() : this(CorePINVOKE.new_Ode(), true)
        {
            SwigDirectorConnect();
        }

        private void SwigDirectorConnect()
        {
            if (SwigDerivedClassHasMethod("system", swigMethodTypes0))
                swigDelegate0 = SwigDirectorsystem;
            if (SwigDerivedClassHasMethod("observer", swigMethodTypes1))
                swigDelegate1 = SwigDirectorobserver;
            CorePINVOKE.Ode_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
        }

        private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes)
        {
            var methodInfo = this.GetType()
                                 .GetMethod(methodName,
                                            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null,
                                            methodTypes, null);
            var hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof (Ode));
            return hasDerivedMethod;
        }

        private void SwigDirectorsystem(IntPtr x, IntPtr dxdt, double t)
        {
            system(new StateType(x, false), new StateType(dxdt, false), t);
        }

        private void SwigDirectorobserver(IntPtr x, double t)
        {
            observer(new StateType(x, false), t);
        }

        public delegate void SwigDelegateOde_0(IntPtr x, IntPtr dxdt, double t);

        public delegate void SwigDelegateOde_1(IntPtr x, double t);

        private SwigDelegateOde_0 swigDelegate0;
        private SwigDelegateOde_1 swigDelegate1;

        private static readonly Type[] swigMethodTypes0 = new[]
            {typeof (StateType), typeof (StateType), typeof (double)};

        private static readonly Type[] swigMethodTypes1 = new[] {typeof (StateType), typeof (double)};
    }
}
