/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OdeLibrary {

using System;
using System.Runtime.InteropServices;

public class ComplexSolver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ComplexSolver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ComplexSolver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ComplexSolver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_ComplexSolver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public StepperTypeCode StepperCode {
    set {
      CorePINVOKE.ComplexSolver_StepperCode_set(swigCPtr, (int)value);
    } 
    get {
      StepperTypeCode ret = (StepperTypeCode)CorePINVOKE.ComplexSolver_StepperCode_get(swigCPtr);
      return ret;
    } 
  }

  public int ConvenienceSolve(ComplexOde od, double from, double step, double to) {
    int ret = CorePINVOKE.ComplexSolver_ConvenienceSolve(swigCPtr, ComplexOde.getCPtr(od), from, step, to);
    return ret;
  }

  public int Solve(ComplexOde ode, double from, double step, double to, IntegrateFunctionTypeCode integrateFunctionTypeCode) {
    int ret = CorePINVOKE.ComplexSolver_Solve__SWIG_0(swigCPtr, ComplexOde.getCPtr(ode), from, step, to, (int)integrateFunctionTypeCode);
    return ret;
  }

  public int Solve(ComplexOde ode, double from, double step, double to) {
    int ret = CorePINVOKE.ComplexSolver_Solve__SWIG_1(swigCPtr, ComplexOde.getCPtr(ode), from, step, to);
    return ret;
  }

  public int Solve(ComplexOde ode, double from, double step, int stepsCount) {
    int ret = CorePINVOKE.ComplexSolver_Solve__SWIG_2(swigCPtr, ComplexOde.getCPtr(ode), from, step, stepsCount);
    return ret;
  }

  public int Solve(ComplexOde ode, StateType timePoints, double step) {
    int ret = CorePINVOKE.ComplexSolver_Solve__SWIG_3(swigCPtr, ComplexOde.getCPtr(ode), StateType.getCPtr(timePoints), step);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ComplexSolver() : this(CorePINVOKE.new_ComplexSolver(), true) {
  }

}

}
